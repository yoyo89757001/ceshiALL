package com.ruitong.huiyi3.huiyixinxi;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ruitong.huiyi3.beans.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HUI_YI_ID".
*/
public class HuiYiIDDao extends AbstractDao<HuiYiID, Long> {

    public static final String TABLENAME = "HUI_YI_ID";

    /**
     * Properties of entity HuiYiID.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SubConferenceCode = new Property(1, String.class, "subConferenceCode", false, "SUB_CONFERENCE_CODE");
        public final static Property StartTime = new Property(2, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, long.class, "endTime", false, "END_TIME");
    }


    public HuiYiIDDao(DaoConfig config) {
        super(config);
    }
    
    public HuiYiIDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HUI_YI_ID\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SUB_CONFERENCE_CODE\" TEXT," + // 1: subConferenceCode
                "\"START_TIME\" INTEGER NOT NULL ," + // 2: startTime
                "\"END_TIME\" INTEGER NOT NULL );"); // 3: endTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HUI_YI_ID\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HuiYiID entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String subConferenceCode = entity.getSubConferenceCode();
        if (subConferenceCode != null) {
            stmt.bindString(2, subConferenceCode);
        }
        stmt.bindLong(3, entity.getStartTime());
        stmt.bindLong(4, entity.getEndTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HuiYiID entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String subConferenceCode = entity.getSubConferenceCode();
        if (subConferenceCode != null) {
            stmt.bindString(2, subConferenceCode);
        }
        stmt.bindLong(3, entity.getStartTime());
        stmt.bindLong(4, entity.getEndTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HuiYiID readEntity(Cursor cursor, int offset) {
        HuiYiID entity = new HuiYiID( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subConferenceCode
            cursor.getLong(offset + 2), // startTime
            cursor.getLong(offset + 3) // endTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HuiYiID entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSubConferenceCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartTime(cursor.getLong(offset + 2));
        entity.setEndTime(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HuiYiID entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HuiYiID entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HuiYiID entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
