package com.ruitong.huiyi3.beans;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MBLEI_XING_BEAN".
*/
public class MBLeiXingBeanDao extends AbstractDao<MBLeiXingBean, Long> {

    public static final String TABLENAME = "MBLEI_XING_BEAN";

    /**
     * Properties of entity MBLeiXingBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mb_Name = new Property(1, String.class, "mb_Name", false, "MB__NAME");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Shenfen = new Property(3, String.class, "shenfen", false, "SHENFEN");
        public final static Property Huanyinyu = new Property(4, String.class, "huanyinyu", false, "HUANYINYU");
        public final static Property Bg_path = new Property(5, String.class, "bg_path", false, "BG_PATH");
    }


    public MBLeiXingBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MBLeiXingBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MBLEI_XING_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"MB__NAME\" TEXT," + // 1: mb_Name
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"SHENFEN\" TEXT," + // 3: shenfen
                "\"HUANYINYU\" TEXT," + // 4: huanyinyu
                "\"BG_PATH\" TEXT);"); // 5: bg_path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MBLEI_XING_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MBLeiXingBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String mb_Name = entity.getMb_Name();
        if (mb_Name != null) {
            stmt.bindString(2, mb_Name);
        }
        stmt.bindLong(3, entity.getType());
 
        String shenfen = entity.getShenfen();
        if (shenfen != null) {
            stmt.bindString(4, shenfen);
        }
 
        String huanyinyu = entity.getHuanyinyu();
        if (huanyinyu != null) {
            stmt.bindString(5, huanyinyu);
        }
 
        String bg_path = entity.getBg_path();
        if (bg_path != null) {
            stmt.bindString(6, bg_path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MBLeiXingBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String mb_Name = entity.getMb_Name();
        if (mb_Name != null) {
            stmt.bindString(2, mb_Name);
        }
        stmt.bindLong(3, entity.getType());
 
        String shenfen = entity.getShenfen();
        if (shenfen != null) {
            stmt.bindString(4, shenfen);
        }
 
        String huanyinyu = entity.getHuanyinyu();
        if (huanyinyu != null) {
            stmt.bindString(5, huanyinyu);
        }
 
        String bg_path = entity.getBg_path();
        if (bg_path != null) {
            stmt.bindString(6, bg_path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MBLeiXingBean readEntity(Cursor cursor, int offset) {
        MBLeiXingBean entity = new MBLeiXingBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mb_Name
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shenfen
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // huanyinyu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // bg_path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MBLeiXingBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMb_Name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setShenfen(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHuanyinyu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBg_path(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MBLeiXingBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MBLeiXingBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MBLeiXingBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
